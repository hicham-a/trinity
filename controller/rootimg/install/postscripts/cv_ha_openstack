#! /usr/bin/bash
##description    : The third round of High Availability.
##                 This will setup:
##                 1. Pacemaker configuration for the OpenStack Controller services
##                 This needs to be called after cv_install_dockerize.
##                 TODO: add openstack and trinity_api to this setup (contents of cv_install_openstack_on_controller)
##author         : Hans Then
##email          : hans.then@clustervision

#--------------------------------------------------------------------------
# Setup galera password and initial databases
#--------------------------------------------------------------------------
systemctl start galera

mysql=( mysql --protocol=tcp -uroot )
for i in {300..0}; do
    if echo 'SELECT 1' | "${mysql[@]}" &> /dev/null; then
        break
    fi
    echo 'MySQL init process in progress...'
    sleep 3
done
if [ "$i" = 0 ]; then
    echo >&2 'MySQL init process failed.'
    exit 1
fi

"${mysql[@]}" <<-EOSQL
    SET @@SESSION.SQL_LOG_BIN=0;
    set global max_connections = $MYSQL_MAX_CONNECTIONS;

    DELETE FROM mysql.user ;
    CREATE USER 'root'@'%' IDENTIFIED BY "$MYSQL_ROOT_PW" ;
    GRANT ALL ON *.* TO 'root'@'%' WITH GRANT OPTION ;
    DROP DATABASE IF EXISTS test ;
    FLUSH PRIVILEGES ;

    CREATE DATABASE keystone;
    GRANT ALL PRIVILEGES ON keystone.* TO 'keystone'@'localhost' IDENTIFIED BY "$OPENSTACK_KEYSTONE_PW";
    GRANT ALL PRIVILEGES ON keystone.* TO 'keystone'@'%'         IDENTIFIED BY "$OPENSTACK_KEYSTONE_PW";
    CREATE DATABASE glance;
    GRANT ALL PRIVILEGES ON glance.* TO 'glance'@'localhost'     IDENTIFIED BY "$OPENSTACK_GLANCE_PW";
    GRANT ALL PRIVILEGES ON glance.* TO 'glance'@'%'             IDENTIFIED BY "$OPENSTACK_GLANCE_PW";
    CREATE DATABASE nova;
    GRANT ALL PRIVILEGES ON nova.* TO 'nova'@'localhost'         IDENTIFIED BY "$OPENSTACK_NOVA_PW";
    GRANT ALL PRIVILEGES ON nova.* TO 'nova'@'%'                 IDENTIFIED BY "$OPENSTACK_NOVA_PW";
    CREATE DATABASE cinder;
    GRANT ALL PRIVILEGES ON cinder.* TO 'cinder'@'localhost'     IDENTIFIED BY "$OPENSTACK_CINDER_PW";
    GRANT ALL PRIVILEGES ON cinder.* TO 'cinder'@'%'             IDENTIFIED BY "$OPENSTACK_CINDER_PW";
    FLUSH PRIVILEGES ;
EOSQL

#--------------------------------------------------------------------------
# Setup pacemaker
#--------------------------------------------------------------------------
pcs cluster cib config
# Setup high availability for the docker containers
pcs -f config resource create docker systemd:docker op monitor interval="37s"
pcs -f config resource clone docker clone-node-max=1 notify=false

pcs -f config resource create galera systemd:galera op monitor interval="37s"
pcs -f config resource clone galera clone-node-max=1 notify=false

pcs -f config resource create rabbitmq systemd:rabbitmq op monitor interval="37s"
pcs -f config resource create keystone systemd:keystone op monitor interval="37s"
pcs -f config resource create glance systemd:glance op monitor interval="37s"
pcs -f config resource create nova-controller systemd:nova-controller op monitor interval="37s"

pcs -f config resource group add grp_OpenStack rabbitmq keystone glance nova-controller
#pcs -f config resource clone grp_OpenStack clone-node-max=1 notify=false

pcs -f config constraint colocation add grp_OpenStack ip
# pcs -f config constraint order start fs_drbd then start galera
# This is only required when we run xCAT from inside galera
# pcs -f config constraint order start galera then start xCAT
pcs -f config constraint order start galera-clone then start grp_OpenStack
#pcs -f config constraint order start keystone then start glance
#pcs -f config constraint order start keystone then start nova-controller

pcs cluster cib-push config

#--------------------------------------------------------------------------
# Create keystone endpoints for glance etc
#--------------------------------------------------------------------------

# wait for slapd
while :; do ldapsearch -x -b dc=local &>/dev/null; [[ $? != 255 ]] && break; sleep 1; done

keystone_endpoint="http://controller.$CONTROLLER_DOMAIN:35357/v2.0"
for i in {300..0}; do
    if curl -s ${keystone_endpoint}; then 
        $CONTROLLER_MASTER_FS/keystone/keystone-setup.sh
        $CONTROLLER_MASTER_FS/keystone/glance-setup.sh
        $CONTROLLER_MASTER_FS/keystone/nova-setup.sh
        echo "Applied keystone initialization scripts"
        break
    fi
    echo "Waiting for keystone to come up!"
    sleep 5
done
[[ ${i} == 0 ]] && echo "Timeout waiting for keystone to come up"

BRIDGE="br100"
source /etc/profile.d/xcat.sh
sed -e "s/<TENANT>/admin/g" \
    -e "s/<USER>/admin/g" \
    -e "s/<PASSWORD>/$OPENSTACK_ADMIN_PW/g" \
    -e "s/<OPENSTACK>/$CONTROLLER_FIP/g" \
    /trinity/openstack/keystonerc > /root/keystonerc_admin
chmod go-rw /root/keystonerc_admin
scp /root/keystonerc_admin controller-2.$CONTROLLER_DOMAIN:/root/keystonerc_admin
source /root/keystonerc_admin

#-- Create the Flat Network
systemctl start openstack-nova-network

NETWORK_LABEL="novanetwork"
nova network-create \
       --fixed-range-v4 $CONTROLLER_VM_SUBNET \
       --fixed-cidr $CONTROLLER_VM_SUBNET \
       --bridge-interface $CONTROLLER_OPENSTACK_NIC \
       --bridge ${BRIDGE} \
       ${NETWORK_LABEL}

#-- Download the base login node image (CentOS cloud image) and upload it to glance
# We have a sitemaster, copy from master node.
mkdir -p /trinity/qcows/
CLOUD_IMAGE="/trinity/qcows/login.qcow2"
# FIXME: Find a better location. We cannot assume /tmp/trinity is still mounted here.
cp $CONTROLLER_MASTER_FS/qcows/login.qcow2 ${CLOUD_IMAGE}
CLOUD_IMAGE_FORMAT="qcow2"
CLOUD_CONTAINER_FORMAT="bare"
LOGIN_IMAGE="login"
LOGIN_SETUP="/trinity/login/mini-setup.sh"

glance image-create \
    --name "${LOGIN_IMAGE}" \
    --disk-format "${CLOUD_IMAGE_FORMAT}" \
    --container-format "${CLOUD_CONTAINER_FORMAT}" \
    --is-public True \
    --file "${CLOUD_IMAGE}"

nova secgroup-add-rule default tcp 1 65535 0.0.0.0/0
nova secgroup-add-rule default icmp -1 -1 0.0.0.0/0

systemctl daemon-reload

echo "$0 finished @ $(date)" >> /var/log/postinstall.log
